# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import Error, GetMoviesSort, MovieListResponse, MovieResponse, Order


class MovieService(BaseService):

    @cast_models
    def get_movies(
        self,
        page: int = SENTINEL,
        limit: int = SENTINEL,
        offset: int = SENTINEL,
        sort: GetMoviesSort = SENTINEL,
        order: Order = SENTINEL,
        _id: str = SENTINEL,
        name: str = SENTINEL,
        runtime_in_minutes: int = SENTINEL,
        budget_in_millions: float = SENTINEL,
        box_office_revenue_in_millions: float = SENTINEL,
        academy_award_nominations: int = SENTINEL,
        academy_award_wins: int = SENTINEL,
        rotten_tomatoes_score: float = SENTINEL,
    ) -> MovieListResponse:
        """Returns all movies from The Lord of the Rings.

        :param page: The page number to retrieve., defaults to None
        :type page: int, optional
        :param limit: The maximum number of items to return per page., defaults to None
        :type limit: int, optional
        :param offset: The offset from the start of the collection to return., defaults to None
        :type offset: int, optional
        :param sort: Sort the results by a specific field., defaults to None
        :type sort: GetMoviesSort, optional
        :param order: The order in which to sort results (asc or desc)., defaults to None
        :type order: Order, optional
        :param _id: Filter by ID., defaults to None
        :type _id: str, optional
        :param name: Filter by name., defaults to None
        :type name: str, optional
        :param runtime_in_minutes: Filter by movie runtime., defaults to None
        :type runtime_in_minutes: int, optional
        :param budget_in_millions: Filter by movie budget., defaults to None
        :type budget_in_millions: float, optional
        :param box_office_revenue_in_millions: Filter by movie box office revenue., defaults to None
        :type box_office_revenue_in_millions: float, optional
        :param academy_award_nominations: Filter by movie academy award nominations., defaults to None
        :type academy_award_nominations: int, optional
        :param academy_award_wins: Filter by movie academy award wins., defaults to None
        :type academy_award_wins: int, optional
        :param rotten_tomatoes_score: Filter by movie rotten tomatoes score., defaults to None
        :type rotten_tomatoes_score: float, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: MovieListResponse
        """

        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(limit)
        Validator(int).is_optional().min(0).validate(offset)
        Validator(GetMoviesSort).is_optional().validate(sort)
        Validator(Order).is_optional().validate(order)
        Validator(str).is_optional().validate(_id)
        Validator(str).is_optional().validate(name)
        Validator(int).is_optional().validate(runtime_in_minutes)
        Validator(float).is_optional().validate(budget_in_millions)
        Validator(float).is_optional().validate(box_office_revenue_in_millions)
        Validator(int).is_optional().validate(academy_award_nominations)
        Validator(int).is_optional().validate(academy_award_wins)
        Validator(float).is_optional().validate(rotten_tomatoes_score)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/movie",
                [self.get_access_token()],
            )
            .add_query("page", page)
            .add_query("limit", limit)
            .add_query("offset", offset)
            .add_query("sort", sort)
            .add_query("order", order)
            .add_query("_id", _id)
            .add_query("name", name)
            .add_query("runtimeInMinutes", runtime_in_minutes)
            .add_query("budgetInMillions", budget_in_millions)
            .add_query("boxOfficeRevenueInMillions", box_office_revenue_in_millions)
            .add_query("academyAwardNominations", academy_award_nominations)
            .add_query("academyAwardWins", academy_award_wins)
            .add_query("rottenTomatoesScore", rotten_tomatoes_score)
            .add_error(400, Error)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return MovieListResponse._unmap(response)

    @cast_models
    def get_movie_by_id(self, id_: str) -> MovieResponse:
        """Returns a single movie based on its unique identifier.

        :param id_: The unique identifier of the item to retrieve.
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: MovieResponse
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/movie/{{id}}",
                [self.get_access_token()],
            )
            .add_path("id", id_)
            .add_error(400, Error)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return MovieResponse._unmap(response)
