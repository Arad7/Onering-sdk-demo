# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import BookListResponse, BookResponse, Error, GetBooksSort, Order


class BookService(BaseService):

    @cast_models
    def get_books(
        self,
        page: int = SENTINEL,
        limit: int = SENTINEL,
        offset: int = SENTINEL,
        sort: GetBooksSort = SENTINEL,
        order: Order = SENTINEL,
        _id: str = SENTINEL,
        name: str = SENTINEL,
    ) -> BookListResponse:
        """Returns all books from The Lord of the Rings.

        :param page: The page number to retrieve., defaults to None
        :type page: int, optional
        :param limit: The maximum number of items to return per page., defaults to None
        :type limit: int, optional
        :param offset: The offset from the start of the collection to return., defaults to None
        :type offset: int, optional
        :param sort: Sort the results by a specific field., defaults to None
        :type sort: GetBooksSort, optional
        :param order: The order in which to sort results (asc or desc)., defaults to None
        :type order: Order, optional
        :param _id: Filter by ID., defaults to None
        :type _id: str, optional
        :param name: Filter by name., defaults to None
        :type name: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: BookListResponse
        """

        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(limit)
        Validator(int).is_optional().min(0).validate(offset)
        Validator(GetBooksSort).is_optional().validate(sort)
        Validator(Order).is_optional().validate(order)
        Validator(str).is_optional().validate(_id)
        Validator(str).is_optional().validate(name)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/book",
                [self.get_access_token()],
            )
            .add_query("page", page)
            .add_query("limit", limit)
            .add_query("offset", offset)
            .add_query("sort", sort)
            .add_query("order", order)
            .add_query("_id", _id)
            .add_query("name", name)
            .add_error(400, Error)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return BookListResponse._unmap(response)

    @cast_models
    def get_book_by_id(self, id_: str) -> BookResponse:
        """Returns a single book based on its unique identifier.

        :param id_: The unique identifier of the item to retrieve.
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: BookResponse
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/book/{{id}}",
                [self.get_access_token()],
            )
            .add_path("id", id_)
            .add_error(400, Error)
            .add_error(404, Error)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return BookResponse._unmap(response)
