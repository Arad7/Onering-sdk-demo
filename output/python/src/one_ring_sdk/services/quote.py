# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.sentinel import SENTINEL
from ..models.utils.cast_models import cast_models
from ..models import Error, QuoteListResponse, QuoteResponse


class QuoteService(BaseService):

    @cast_models
    def get_quotes(
        self,
        page: int = SENTINEL,
        limit: int = SENTINEL,
        offset: int = SENTINEL,
        _id: str = SENTINEL,
        dialog: str = SENTINEL,
        movie: str = SENTINEL,
        character: str = SENTINEL,
    ) -> QuoteListResponse:
        """Returns all quotes from The Lord of the Rings.

        :param page: The page number to retrieve., defaults to None
        :type page: int, optional
        :param limit: The maximum number of items to return per page., defaults to None
        :type limit: int, optional
        :param offset: The offset from the start of the collection to return., defaults to None
        :type offset: int, optional
        :param _id: Filter by ID., defaults to None
        :type _id: str, optional
        :param dialog: Filter by quote dialog., defaults to None
        :type dialog: str, optional
        :param movie: Filter by quote movie ID., defaults to None
        :type movie: str, optional
        :param character: Filter by quote character ID., defaults to None
        :type character: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: QuoteListResponse
        """

        Validator(int).is_optional().min(1).validate(page)
        Validator(int).is_optional().min(1).max(1000).validate(limit)
        Validator(int).is_optional().min(0).validate(offset)
        Validator(str).is_optional().validate(_id)
        Validator(str).is_optional().validate(dialog)
        Validator(str).is_optional().validate(movie)
        Validator(str).is_optional().validate(character)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/quote",
                [self.get_access_token()],
            )
            .add_query("page", page)
            .add_query("limit", limit)
            .add_query("offset", offset)
            .add_query("_id", _id)
            .add_query("dialog", dialog)
            .add_query("movie", movie)
            .add_query("character", character)
            .add_error(400, Error)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return QuoteListResponse._unmap(response)

    @cast_models
    def get_quote_by_id(self, id_: str) -> QuoteResponse:
        """Returns a single quote based on its unique identifier.

        :param id_: The unique identifier of the item to retrieve.
        :type id_: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: QuoteResponse
        """

        Validator(str).validate(id_)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/quote/{{id}}",
                [self.get_access_token()],
            )
            .add_path("id", id_)
            .add_error(400, Error)
            .add_error(404, Error)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return QuoteResponse._unmap(response)
